<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MicroServices on Learnings in IT</title>
    <link>http://localhost:1313/tags/microservices/</link>
    <description>Recent content in MicroServices on Learnings in IT</description>
    <image>
      <title>Learnings in IT</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <copyright>Â©</copyright>
    <lastBuildDate>Mon, 15 Sep 2025 01:00:00 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Architecture, Modular Monolith and Vertical Slice Architecture </title>
      <link>http://localhost:1313/posts/comparearchitecturestyles/</link>
      <pubDate>Mon, 15 Sep 2025 01:00:00 +0530</pubDate>
      <guid>http://localhost:1313/posts/comparearchitecturestyles/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Architecture plays a pivotal role in the delivery of software in terms of achieving business goals set forth for the software like maintainability, availability, performance and many more. It helps introduce structured approach to development by means of having appropriate abstractions. Typical driving forces for a software are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional/Business requirements&lt;/li&gt;
&lt;li&gt;Quality attributes (performance, scalability, availability etc.)&lt;/li&gt;
&lt;li&gt;Agility (Need to respond fluently to changes)&lt;/li&gt;
&lt;li&gt;Constraints (Deployment platform)&lt;/li&gt;
&lt;li&gt;Principles (Automated testing, Automated deployment etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this pursuit, there are alternate styles to structure software. Lets look at below ones which are dominant,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Temporal.io to build Long running Workflows</title>
      <link>http://localhost:1313/posts/temporalworkflow/</link>
      <pubDate>Mon, 07 Dec 2020 08:25:04 +0530</pubDate>
      <guid>http://localhost:1313/posts/temporalworkflow/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;In a typical business Application, there are often requirements for,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Batch processing - Often long running Tasks like data import/export, End of day processing etc. These tasks are often scheduled to be executed at pre-defined interval or on occurance of an Event.&lt;/li&gt;
&lt;li&gt;Asychronous processing - Tasks, often part of business process / workflow, that can be performed asychronously or offloaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such requirements are often fulfilled with custom approaches like batch processing frameworks, ETL Tools or using Queues or specific database features.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
