<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Litestream on Learnings in IT</title><link>http://localhost:1313/tags/litestream/</link><description>Recent content in Litestream on Learnings in IT</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 30 Dec 2021 01:00:00 +0530</lastBuildDate><atom:link href="http://localhost:1313/tags/litestream/index.xml" rel="self" type="application/rss+xml"/><item><title>Can SQLite be considered for Server Applications?</title><link>http://localhost:1313/posts/is_sqlite_production_ready/</link><pubDate>Thu, 30 Dec 2021 01:00:00 +0530</pubDate><guid>http://localhost:1313/posts/is_sqlite_production_ready/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>While embarking on building any new server application, one of the key requirement is whether it needs durable, persistent storage of data (and in most cases, it does). This is followed by evaluating suitable data store. Likely evaluation criteria is Application&amp;rsquo;s Requirement (Tolerance for eventual consistency, High Availability etc.), Team&amp;rsquo;s familiarity, Costs, Tech. support availability and so on.
In case of choices in relational databases, typical go to options are MySQL, PostgreSQL or even proprietary databases like Oracle , SQL Server. Seldom one considers &lt;a href=https://SQLite.org
 
 target=_blank rel="noopener noreferrer"
>SQLite&lt;/a> for this purpose.&lt;/p></description></item></channel></rss>