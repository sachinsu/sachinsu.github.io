<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SOAP on Learnings in IT</title>
    <link>http://localhost:1313/tags/soap/</link>
    <description>Recent content in SOAP on Learnings in IT</description>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 May 2021 01:00:00 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/soap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Domain driven Design: Learnings</title>
      <link>http://localhost:1313/posts/domain_driven_transcript_from_pluralsight/</link>
      <pubDate>Sat, 15 May 2021 01:00:00 +0530</pubDate>
      <guid>http://localhost:1313/posts/domain_driven_transcript_from_pluralsight/</guid>
      <description>&lt;p&gt;Course Overview
Welcome to Pluralsight. My name is Julie Lerman, and this is Steve Smith. Together, we&amp;rsquo;d like to welcome you to our course, Domain‑Driven Design Fundamentals. Steve is a trainer and architect with NimblePros and spends a lot of time helping teams write better code, faster. And Julie is well known in the DDD community for helping reluctant teams embrace domain‑driven design. In this course, we give you a strong foundation for learning how to build applications and microservices using domain‑driven design. DDD has proven to be a very effective approach for managing complex requirements. The original version of this course has helped many thousands of learners leverage domain‑driven design, and they have shared amazing feedback. Now, we&amp;rsquo;ve updated the course and its sample application to reflect ideas and tools that have emerged since that first version. Some of the major topics that we&amp;rsquo;ll cover include what are the essential ideas of domain‑driven design? What are the main patterns used in domain models? We&amp;rsquo;ll also talk about how to break up concepts into smaller parts and how these smaller aggregates and contexts communicate with one another. By the end of this course, you&amp;rsquo;ll know how to break down customer requirements into a maintainable domain model and structure a solution using domain‑driven design. Before beginning the course, you should at least be familiar with software development, ideally using C#. From here, you should feel comfortable diving into DDD and design patterns with courses on the DDD learning path and the design patterns learning path. We hope you&amp;rsquo;ll join us on this journey to learn domain‑driven design with the Domain‑Driven Design Fundamentals course, at Pluralsight.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Upgrading API: Learnings</title>
      <link>http://localhost:1313/posts/apiupgrade/</link>
      <pubDate>Sat, 15 May 2021 01:00:00 +0530</pubDate>
      <guid>http://localhost:1313/posts/apiupgrade/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;One of the design considerations stressed upon by Jeffrey richter about APIs (Read more &lt;a href=http://localhost:1313/posts/restapiversioning/
    
    
&gt;here&lt;/a&gt;) is that &amp;ldquo;API is expected to be stable over long period of time&amp;rdquo;. Recently,for a .NET based project, we decided to upgrade some of the ASMX (legacy SOAP based approach) based APIs and were immediately reminded by Customer(s) to avoid any kind of impact on existing users.&lt;/p&gt;
&lt;p&gt;This means that upgrade must be done keeping in mind,&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
