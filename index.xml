<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learnings in IT</title><link>https://sachinsu.github.io/</link><description>Recent content on Learnings in IT</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 23 May 2024 14:28:27 +0530</lastBuildDate><atom:link href="https://sachinsu.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>What am i doing *NOW*</title><link>https://sachinsu.github.io/now/</link><pubDate>Thu, 23 May 2024 14:28:27 +0530</pubDate><guid>https://sachinsu.github.io/now/</guid><description>Location Mumbai, Maharashtra, India
Professional Title Senior Technical Architect at Worldline India
What do you do ? I write code. In my current role, I am responsible for Architecture for all the systems in Payments space covering Acquiring and Issuance of Cards, UPI (QR based payment system in India). I am involved in creating and maintaining the Architecture of various systems, integration between them, primarily focussing on non-functional (ilities) aspects.</description></item><item><title>Using local LLM with Ollama and Semantic Kernel</title><link>https://sachinsu.github.io/posts/ollamasemantickernel/</link><pubDate>Sat, 11 May 2024 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/ollamasemantickernel/</guid><description>Introduction Artificial Intelligence, especially Large language models (LLMs) are all in high demand. Since OpenAI released ChatGPT, interest has gone up multi-fold. Since 2023, Powerful LLMs can be run on local machines. Local Large Language Models offer advantages in terms of data privacy and security and can be enriched using enterprise-specific data using Retrieval augmentation generation (RAG).Several tools exist that make it relatively easy to obtain, run and manage such models locally on our machines.</description></item><item><title>Programming Languages - Java</title><link>https://sachinsu.github.io/links/java/</link><pubDate>Sun, 03 Mar 2024 14:13:27 +0530</pubDate><guid>https://sachinsu.github.io/links/java/</guid><description>Java Language Articles, E-books Getting Started with Java in 2023 Finding Java Thread Leaks With JDK Flight Recorder and a Bit Of SQL</description></item><item><title>Troubleshooting TLS handshake issue</title><link>https://sachinsu.github.io/posts/tlshandsharefailure/</link><pubDate>Sat, 25 Feb 2023 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/tlshandsharefailure/</guid><description>Background Ever encountered a scenario where REST API consumption works from tools like curl, Web Browser but not from Application. Lets dive in.
The requirement is as simple as consuming REST API from a Application over TLS.
Problem Statement The REST API, to be consumed, is standard API interface which requires access over TLS. The client in this case is Windows 2016 server.
During Development, Windows 10 is used to develop and test the code.</description></item><item><title>URL Shortener in High Throughput Service</title><link>https://sachinsu.github.io/posts/shortidgeneration/</link><pubDate>Sun, 15 May 2022 01:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/shortidgeneration/</guid><description>Background A Client has E-commerce Application consisting of services aimed at specific domains of business functionality it serves. One of these services is responsible for accepting the order, authenticating it and forwarding it for further processing in terms of inventory checks, payment and so on. For Authentication, this service sends SMS to Customer&amp;rsquo;s Mobile number (and e-mail id) and customer is supposed to confirm this order placement by means of entering Code received in it.</description></item><item><title>PostgreSQL</title><link>https://sachinsu.github.io/links/postgresql/</link><pubDate>Mon, 10 Jan 2022 15:08:50 +0530</pubDate><guid>https://sachinsu.github.io/links/postgresql/</guid><description>PostgreSQL General Articles Mistakes to avoid while using PostgreSQL Free Postgres database (or SQLite) from fly.io Using generate_series feature for reporting When Postgres blocks: 7 tips for dealing with locks PostgreSQL - Don&amp;amp;amp;rsquo;t do this Is PostgreSQL good enough? Online event processing by Martin Klepmann PostgreSQL rocks, except when it blocks: Understanding locks Connection handling best practice with PostgreSQL 10 Things I Hate About PostgreSQL PostgreSQL - Advanced Administration by Bruce Momjian Top Tools and Recommendations to Manage Postgres in an Enterprise: Administration, Performance, High Availability, and Migration Using PostgreSQL as Cache and Read Optimization tips Adyen&amp;amp;amp;rsquo;s Use of PostgreSQL PostgreSQL version Upgrade @ Gitlab Zombodb - PostgreSQL and ElasticSearch work together Using pg_timetable for job scheduling Using pg_cron to schedule background tasks Using pg_cron to roll up for Analytics PG Database Configuration Helper Full text search in PostgreSQL Postgres full text search capabilities Full text search (Crunchydata) PostgreSQL - Best practices(Azure) Designing high performance time series data table in (RDS) postgresql while using BRIN Index Informative blog on PostgreSQL Understanding GIN indexes PostgreSQL - Using SQL for Data Analysis Approach to Bulk Import in PostGreSQL Schema updates with zero downtime in PostgreSQL How to JSON in PostgreSQL Grouping, Rollups and Cubes Row level Security Just use postgres Performance tuning, configuration etc.</description></item><item><title>Can SQLite be considered for Server Applications?</title><link>https://sachinsu.github.io/posts/is_sqlite_production_ready/</link><pubDate>Thu, 30 Dec 2021 01:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/is_sqlite_production_ready/</guid><description>Introduction While embarking on building any new server application, one of the key requirement is whether it needs durable, persistent storage of data (and in most cases, it does). This is followed by evaluating suitable data store. Likely evaluation criteria is Application&amp;rsquo;s Requirement (Tolerance for eventual consistency, High Availability etc.), Team&amp;rsquo;s familiarity, Costs, Tech. support availability and so on. In case of choices in relational databases, typical go to options are MySQL, PostgreSQL or even proprietary databases like Oracle , SQL Server.</description></item><item><title>Profiling and benchmarking tools for Applications</title><link>https://sachinsu.github.io/posts/profiling_n_benchmarking/</link><pubDate>Sun, 12 Dec 2021 01:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/profiling_n_benchmarking/</guid><description>Introduction We develop a piece of software with aim to fulfil specific business requirements in terms of resource usage, throughput, availability among others. Profiling and benchmarking are approaches that developer has in his/her arsenal to gain continuous feedback on whether a piece of code is behaving optimally and adhering to it&amp;rsquo;s objectives.
Lets look at what they mean,
Profiling is defined as process aimed at understanding the behavior of a program.</description></item><item><title>Database Reliability Engineering - My Notes</title><link>https://sachinsu.github.io/posts/dbre/</link><pubDate>Sun, 05 Sep 2021 01:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/dbre/</guid><description>Introduction I have been reading excellent Database Reliability Engineering book and below are my notes from it.
Key Incentive(s) for Automation
Elimination of Toil - Toil is the kind of work tied to running a production service that tends to be manual, repetitive, automatable, tactical, devoid of enduring value, and that scales linearly as a service grows. Important System Characteristics
Latency, also known as response time, is a time-based measurement indicating how long it takes to receive a response from a request.</description></item><item><title>Near real time API Monitoring with Grafana and PostgreSQL</title><link>https://sachinsu.github.io/posts/nrtanalysispostgresql/</link><pubDate>Thu, 15 Jul 2021 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/nrtanalysispostgresql/</guid><description>Introduction Suppose you have a distributed application running in production and it is based on Micro services/Service Oriented Architecture and have SLA of being &amp;ldquo;always on&amp;rdquo; (be available 24*7, barring deployments of course !!). In such cases, having proper monitoring of Application health in place is absolutely essential.
What if Monitoring is an afterthought (i.e. application is already in production) ? and that there is little apetite for additional components like (Visualization tools, specialized storage for logs/metrics/traces) for monitoring?</description></item><item><title>Upgrading API: Learnings</title><link>https://sachinsu.github.io/posts/apiupgrade/</link><pubDate>Sat, 15 May 2021 01:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/apiupgrade/</guid><description>Introduction One of the design considerations stressed upon by Jeffrey richter about APIs (Read more here) is that &amp;ldquo;API is expected to be stable over long period of time&amp;rdquo;. Recently,for a .NET based project, we decided to upgrade some of the ASMX (legacy SOAP based approach) based APIs and were immediately reminded by Customer(s) to avoid any kind of impact on existing users.
This means that upgrade must be done keeping in mind,</description></item><item><title>Presto - A distributed SQL Engine for variety of data stores</title><link>https://sachinsu.github.io/posts/presto/</link><pubDate>Mon, 29 Mar 2021 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/presto/</guid><description>Introduction In a company/enterprise, typically there are multiple sources of data. This could be result of M&amp;amp;A (where each of those add in a new data store) or result of multi year process of using data stores that are in vogue at that time. Result is combination of various types of relational databases, flat file systems, queues and so on. This results in Data Silos. This scenario is typically observed in companies who are running workloads On-prem (i.</description></item><item><title>ELT approach for Data Pipelines</title><link>https://sachinsu.github.io/posts/elt/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/elt/</guid><description>Introduction While gathering data for Analytics, one often has to source data from multiple sources. Traditionally, the approach has been to do ETL (Extract-Transform-load) where,
Extract - typically involves retrieving data from source. This could also be via streaming Transform - Apply transformation to the extracted data. Load - Loading the data in Operation Data store (ODS) or data warehouse Refer here for more details on ETL. ETL has been made easy by tools like Talend, SSIS and so on.</description></item><item><title>Learnings from Jeff Richter's Designing and Versioning HTTP REST APIs Video Course</title><link>https://sachinsu.github.io/posts/restapiversioning/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/restapiversioning/</guid><description>Background Recently, i went through excellent video series on Designing &amp;amp; Versioning HTTP_REST APIs presented by Jeffrey Richter. It is available here. In the past, i had read Jeff&amp;rsquo;s books on CLR and found his writing to be very clear and understandable. So is my experience with this Video Series. Below is summary of learnings from this Video Series. I do not claim that every aspect is covered here so please do check out the videos.</description></item><item><title>Resiliency Testing with Toxiproxy</title><link>https://sachinsu.github.io/posts/resiliencytoxiproxy/</link><pubDate>Sat, 09 Jan 2021 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/resiliencytoxiproxy/</guid><description>Background In a typical workflow of software development, Developer implements a Unit/component, tests it and pushes the changes to source control repository. It then goes through Continuous integration, automated testing, provisioning and deployment. Given High availability requirements expected (or should i say assumed) nowadays, As much as functional correctness of the Unit, it is also important to test how a Unit/Component handles failures, delays etc. in distributed environment. Often, such behavior is observed in production itself, unless project team is following practices of Chaos engineering.</description></item><item><title>Using Temporal.io to build Long running Workflows</title><link>https://sachinsu.github.io/posts/temporalworkflow/</link><pubDate>Mon, 07 Dec 2020 08:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/temporalworkflow/</guid><description>Background In a typical business Application, there are often requirements for,
Batch processing - Often long running Tasks like data import/export, End of day processing etc. These tasks are often scheduled to be executed at pre-defined interval or on occurance of an Event. Asychronous processing - Tasks, often part of business process / workflow, that can be performed asychronously or offloaded. Such requirements are often fulfilled with custom approaches like batch processing frameworks, ETL Tools or using Queues or specific database features.</description></item><item><title>Getting Started with OpenTelemetry</title><link>https://sachinsu.github.io/posts/opentelemetry/</link><pubDate>Sat, 07 Nov 2020 08:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/opentelemetry/</guid><description>Background How many times have we landed up in a meeting staring at random slowness or such production issues in a distributed Application ? only to experience helplessness with limited (or often times no) visibility available about the runtime behavior of the Application. It often ends up in manually correlating whatever diagnostic data available from Application and combining it with trace/logs that are available from O/S, databases etc. and trying to figure out &amp;ldquo;Root cause&amp;rdquo; of the issue.</description></item><item><title>Ninja - Using lightweight build system for Go projects</title><link>https://sachinsu.github.io/posts/ninjabuildsystem/</link><pubDate>Tue, 27 Oct 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/ninjabuildsystem/</guid><description>Background I primarily work on Windows for development purposes. Whenever its about writing code in Golang, invariably one comes across usage of Make. A quick check on popular Go projects on Github will show Makefile being used to automate tasks like linting, build, testing and deployment.
Being on Windows, i have been looking for alternative build tool that is easy to setup (i.e. doesn&amp;rsquo;t require mingw and such environments) and use compared to Make (which is primarily targetted at Unix and Unix like Operating Systems).</description></item><item><title>Validating urls from 'Useful Links' section using bash / command line tools</title><link>https://sachinsu.github.io/posts/urlhealthchecks/</link><pubDate>Thu, 15 Oct 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/urlhealthchecks/</guid><description>Background I started this blog, https://sachinsu.github.io few months back .
In this relatively short period of time, Blog has sizeable number of useful links across various categories in addition to the detailed blog post like this one.
As an ongoing activity, I think that it is necessary to verify links mentioned on this blog.
So how can it be done ? obviously one way is to do it manually by visiting each link and updating/removing those that are no longer available.</description></item><item><title>Trobleshooting TCP Connection request time outs</title><link>https://sachinsu.github.io/posts/connectiontimeouts/</link><pubDate>Tue, 25 Aug 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/connectiontimeouts/</guid><description>Background I recently had opportunity to support team who has been battling with Intermittent (scary i know :)) issues with TCP connectivity in Production.
Simplified deployment Architecture is as below,
High Level Architecture Technology Stack used is Microsoft .NET Framework 4.8 using ODP.NET for Oracle Connectivity (Oracle Server is 8 CPU box). Each of Web Servers in cluster have IIS hosted on it with multiple Applications (Application domains) serving HTTP(s) based traffic.</description></item><item><title>Tool to mass DM followers on Twitter in Go</title><link>https://sachinsu.github.io/posts/massdmgolang/</link><pubDate>Sat, 25 Jul 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/massdmgolang/</guid><description>Background I recently came across bounty by Balaji Srinivasan to send Direct Message to all twitter followers. Currently, i do not intend to participate in bounty and this is mere exercise.
This is an attempt to write CLI tool in Golang in response to it.
For detailed requirements, refer here
Approach In Brief,
CLI should,
accept arguments like Twitter API Key,Auth token, DM Message Download all followers (with profile details) Rank them by Criteria (e.</description></item><item><title>Resources for Online Learning</title><link>https://sachinsu.github.io/links/onlearn/</link><pubDate>Thu, 18 Jun 2020 12:33:07 +0530</pubDate><guid>https://sachinsu.github.io/links/onlearn/</guid><description>Section covering resources for Online learning etc.
Exploring basics of Computer Science, bit by bit Exploring basics of Distributed Systems Awesome List of Free Learning Resources Collection of online learning resources Complete intro to Linux and CLI Linux System Administration - Skill challenge</description></item><item><title>Programming Languages - Python</title><link>https://sachinsu.github.io/links/python/</link><pubDate>Sun, 07 Jun 2020 14:13:27 +0530</pubDate><guid>https://sachinsu.github.io/links/python/</guid><description>Python has become pervasive all throught Data Science be it Machine learning, Deep learning, Data Processing and general purpose tasks like Web Development.
Courses, Trainings Python Tutorials Python for Beginners from MSDN Nice Collection of trainings per level of complexity Python Programming And Numerical Methods: A Guide For Engineers And Scientists Practical Python Projects Articles Getting machine learning to production A quick-and-dirty guide on how to install packages for Python What to do when data doesn&amp;amp;amp;rsquo;t fit in memory DataSette - Architecture Notes Packages EasyOCR - supports 40&amp;#43; languages Simplified Static file serving for Python Static Site generator (with Markdown support) JupyterLab Desktop App Python helper library for ETL between databases Podcasts Talkpython</description></item><item><title>Web Security Measures in ASP.NET Applications</title><link>https://sachinsu.github.io/posts/websecurity/</link><pubDate>Thu, 04 Jun 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/websecurity/</guid><description>At my current workplace, All Applications are expected to adhere to PCI DSS standards meant for Data protection, Access Regulation and so on. Dedicated SOC Team,consisting of Security analyst who are continously on the prawl to identify breach, conduct periodic auditing of Applications, hardening of Servers.
While all our .NET applications adhere to below guidelines,
ASP.NET Security Overview Secure Coding Guidelines Security Guidelines by OWASP We also use tools like Snyk to perform code vulnerability analysis as part of Jenkins driven CI/CD pipeline.</description></item><item><title>Is WebAssembly future of Web Development</title><link>https://sachinsu.github.io/posts/webassembly/</link><pubDate>Tue, 02 Jun 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/webassembly/</guid><description>Over the last many years, de-facto language of the Web (specifically front-end) has been Javascript (and variants like Typescript, ECMAScript versions and so on). The Web development has been revolving around HTML+CSS+Javascript trio. It all started with support for Javascript in browsers, followed by addition of XMLHTTP API, Rich DOM Manipulation Support in Javascript. To induce order and apply patterns to Javascript&amp;rsquo;s usage in browsers, numerous frameworks and libraries were introduced like React and Vue among others.</description></item><item><title>Using Github Actions for Automated Testing and Deployment</title><link>https://sachinsu.github.io/posts/usinggithubactions/</link><pubDate>Thu, 28 May 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/usinggithubactions/</guid><description>Background The source code of tracfee.com is hosted on Github Private.
At a High level, Tracfee&amp;rsquo;s Architecture involves,
Single Page Application using VueJS, deployed on Netlify API in Go, deployed on Oracle Cloud So far, API testing has been automated and we were looking at ways to automate deployment of both UI and API. Steps required to deploy API are less since we are using Docker to run it on VM.</description></item><item><title>Artificial Intellgence, Machine Learning</title><link>https://sachinsu.github.io/links/aiml/</link><pubDate>Tue, 26 May 2020 14:13:27 +0530</pubDate><guid>https://sachinsu.github.io/links/aiml/</guid><description>Useful links related from AI, ML space
Collections AI Guide by Mozilla Collection of resources related to Applied ML List of for MLOps Free courses Fast AI by Jeremy Howard AI Canon - List of resources around GPT Free Deep learning course Articles How to build your own perplexity for any dataset How a Machine Learns Machine learning is still too hard - Year 2022 Neural Networks from Scratch History of AI Machine Learning Algorithms: What is a Neural Network?</description></item><item><title>Cloud Tech</title><link>https://sachinsu.github.io/links/cloud/</link><pubDate>Tue, 26 May 2020 14:13:27 +0530</pubDate><guid>https://sachinsu.github.io/links/cloud/</guid><description>Useful links for deep diving in various Cloud Ecosystems
Articles Cost of Cloud - Paradox Cloud vs. On-premise Computing Zero dollar Infrastructure stack Cloud Server Performance, Prices, Specs and Features The Cost of Cloud, a Trillion Dollar Paradox Why we are leaving cloud General Guidelines when working as Cloud Engineer Articles (GCP) 13 sample architectures to kickstart your Google Cloud journey Using Google Cloud Spanner locally &amp;amp;amp;hellip;using Emulator Articles (AWS) Preparation Guidelines and courses for AWS Certification Saving egress costs on AWS using S3 Reducing AWS Costs Choosing between EC2 and RDS What a typical 100% Serverless Architecture looks like in AWS!</description></item><item><title>UI/UX</title><link>https://sachinsu.github.io/links/uiux/</link><pubDate>Fri, 08 May 2020 15:07:27 +0530</pubDate><guid>https://sachinsu.github.io/links/uiux/</guid><description>User Interface / User Experience Design Approach Modern Web - Guides, tools and libraries for modern web development. How Stripe Designs Beautiful Websites Tools for non artistic developers Principles of Design Micro frontends - Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. Thoughts on SPAs 33 JavaScript concepts every Developer should know Server side Events for Real-time streaming Updates Four ways to build Web Apps Parallel Data Fetching in SPA&amp;amp;amp;hellip;has Good Primer on React Articles Examples to manipulate HTML-DOM Comparing Polling vs WebSockets vs SSE A simple, choice-driven chatbot framework with Vanilla Javascript Centering in CSS: A Complete Guide Centering in CSS Full-bleed layout using CSS Grid Blog on HTML,fonts, Asynchronous JavaScript How to pick beautiful colors You dont need Javascript Sign in form Best practices How HTTP Range Requests work (for large file downloads etc.</description></item><item><title>Windows Service with Cancelable Task</title><link>https://sachinsu.github.io/posts/windowsservicecancellabletask/</link><pubDate>Tue, 05 May 2020 12:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/windowsservicecancellabletask/</guid><description>Background Recently, we had requirement wherein a process should,
Periodically (Poll) or Asynchronously (Pub-sub) listen on incoming requests/messages. The whole process is expected to be long running. Should also implement clean disposal of in-flight requests and subsequent cleanup using something similar to Cancelble Context in Go The first of the objective is somewhat dependent on mechanism (Pub/sub, Listener), protocol (TCP, HTTP etc.). For the second one, .NET framework (and .NET Core) offers CancellationToken.</description></item><item><title>Optimizing .NET Code using Benchmarks</title><link>https://sachinsu.github.io/posts/usingbenchmarkdotnet/</link><pubDate>Tue, 05 May 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/usingbenchmarkdotnet/</guid><description>Background Oftentimes, we come across situation where code does not perform as per expectation. What is typically approch to address it,
Performance Testing - Visual Studio Load Tests or Third party tools like Locust, Vegeta, Gatling etc. Visual Studio Diagnostics Tools Or Use tools like Perfview/dotTrace/dotMemory to diagnose bottlenecks What if it is possible to Benchmark code for,
Set of varying parameter(s) Different runtimes (.NET Framework versions, .NET core, Mono etc.</description></item><item><title>ASP.NET Core - Mind the SameSite HTTP Cookie settings</title><link>https://sachinsu.github.io/posts/samesitecookies/</link><pubDate>Thu, 09 Apr 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/samesitecookies/</guid><description>Background A Web Application, developed in ASP.NET Core (Runtime Version 3.1.100) using Razor Pages and Web API, is expected to be launched from within third-party Web Application in iframe, with complete HTML being rendered.
During the Development, a mock HTML Page was developed to simulate launching of ASP.NET core based Web Application in iframe. Note that this page as well as Application was hosted on same IIS Server and it worked fine.</description></item><item><title>Perspectives</title><link>https://sachinsu.github.io/links/perspectives/</link><pubDate>Tue, 18 Feb 2020 12:33:07 +0530</pubDate><guid>https://sachinsu.github.io/links/perspectives/</guid><description>Perspectives Section covering Business, project/programming perspectives
Stick to boring Architecture Your tech stack is not the product Architecture anti-patterns Don&amp;amp;amp;rsquo;t call yourself a programmer Grasp Responsibility Patterns Things every programmer should know Guiding principles after 20 years of programming Programmers: Before you turn 40, get a plan B The New Business of AI (and How It’s Different From Traditional Software) Hype driven Development Momentum vs Urgency in Software Project Management Data Science: Reality Doesn&amp;amp;amp;rsquo;t Meet Expectations Quantum computing for the very curious How to Speak (MIT) How Software Groups Rot: Legacy of the Expert Beginner What questions should systems architects ask before creating anything Basecamp for Personal Project Management Marketing for Engineers - Resources Approach to Exception Handling PRESALES (SE) LEADER?</description></item><item><title>Tools</title><link>https://sachinsu.github.io/links/tools/</link><pubDate>Tue, 18 Feb 2020 12:33:07 +0530</pubDate><guid>https://sachinsu.github.io/links/tools/</guid><description>General Purpose tools Section covering useful tools for every day activities, Online learning etc.
Plane - Open source alternative to JIRA ShareX - Screen capture, file sharing and productivity tools (Windows only) Dark Lang - Declarative platform to build serverless backend OBS Studio - Free and open source software for video recording and live streaming. Open source Wiki platform Open source 3D parametric modeler Backstage - an open platform for building developer portals Zoomit - screen zoom and annotation tool for technical presentations that include application demonstrations revealjs - HTML Presentation framework List of Self hosted software Open source Alternative to Heroku/Netlify for Self hosting A book of Secret knowledge - Collection of Useful tools Parsr - Transform PDF,Image into Structured data SOPS - Tool to secure secrets (JSON,YAML, INI etc.</description></item><item><title>Using Channels for High performance Producer consumer implementation</title><link>https://sachinsu.github.io/posts/channelsforproducerconsumer/</link><pubDate>Wed, 12 Feb 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/channelsforproducerconsumer/</guid><description>Background Recently, i got involved in assignment where in an application was facing issues with throughput. Expectation is to support more than 500 transactions per second while load testing results were indicating system was experiencing high latency beyond 100+ transactions per second.
This application is developed in .NET Framework + .NET Core and primarily uses Relational Database for persistence and has point to point integration (mainly over HTTP) with internal &amp;amp; external application(s).</description></item><item><title>Oracle</title><link>https://sachinsu.github.io/links/oracle/</link><pubDate>Fri, 07 Feb 2020 15:09:50 +0530</pubDate><guid>https://sachinsu.github.io/links/oracle/</guid><description>Oracle Database Performance, Best Practices Connection Strategies for Database Applications Using High-Speed Data Loading and Rolling Window Operations with Partitioning Designing Applications for Oracle Real-World Performance Best Practices for Extreme Performance with Oracle Data Warehousing Blog on Oracle Performance troubleshooting Using PL/SQL Bulk processing features Auditing tables using Oracle Flashback data archive instead of triggers Flashback Data Archive to record changes to Table Bulk processing with PL/SQL Bulk Processing with BULK COLLECT and FORALL Primer on Oracle Partitioning Database Core performance principles - Deck Database insert &amp;amp;amp; referential integrity - Performance On Connection Pools, Cursor Differentiation, and Optimal Ordering Analytical Functions Overview About Materialized Views How to find Slow SQL Using External Tables and Table Clusters in Oracle Oracle DBA - Application Tuning Replacing Kafka use cases with Oracle Advanced queues in modern applications SQL Tips you can&amp;amp;amp;rsquo;t do without Change Data Capture Nice writeup on options to do CDC in Oracle Database Integrating Oracle and Kafka Videos Real world performance video series Oracle LiveLabs How to:Analyze AWR Report 5 Minutes Demo: Using Liquibase in SQLcl to version Oracle Database Analytic SQL for Developers - Free course Connection Pooling and SmartDB Oracle Database for Developers - Training How to Create an Execution plan?</description></item><item><title>NOSQL</title><link>https://sachinsu.github.io/links/nosql/</link><pubDate>Fri, 07 Feb 2020 15:08:27 +0530</pubDate><guid>https://sachinsu.github.io/links/nosql/</guid><description>NOSQL Databases MongoDB FerretDB - MongoDB Interface with underlying PostgreSQL as database engine Amazon DynamoDB Data Modelling in DynamoDB Must follow Twitter handle of Rick Houlihan Best Practices for Secondary Indexes with DynamoDB Apache Cassandra 7 mistakes when using Apache Cassandra Apache Geode How Mastercard fights fraud with Apache Geode Apache Pinot Pinot- Enabling Real-time Analytics @ linkedin Redis About Redis DragonflyDB - Alternative to Redis Redis High Availability Redis Cluster KeyDB is a high performance fork of Redis with a focus on multithreading, memory efficiency, and high throughput.</description></item><item><title>MySQL</title><link>https://sachinsu.github.io/links/mysql/</link><pubDate>Fri, 07 Feb 2020 15:07:27 +0530</pubDate><guid>https://sachinsu.github.io/links/mysql/</guid><description>MySQL Links Query analytics for the day-to-day developer with MySQL 8.0 Schema Change Management for MySQL Temporal Data tables in MariaDB MySQL 8.0 Indexes, Histograms, and Other Ways to Speed Up Your Queries Maxwell - MySQL to Kafka change data capture LetsEncrypt setup for MariaDB How LetsEncrypt has built Next Gen Database Servers 18 things you can do to remove mysql Bottlenecks due to High traffic MySQL from Developer&amp;amp;amp;rsquo;s perspective Replication in MySQL Interesting libraries, extensions Distributed job-queue built specifically for queuing and executing heavy SQL read jobs asynchronously.</description></item><item><title>Databases</title><link>https://sachinsu.github.io/links/databases/</link><pubDate>Fri, 07 Feb 2020 15:02:27 +0530</pubDate><guid>https://sachinsu.github.io/links/databases/</guid><description>Database Knowledge base around general database related topics.
General Links Prisma&amp;amp;amp;rsquo;s Data Guide - A growing library of articles focused on making databases more approachable. Query optimization guide Database performance for Developers Heimdall data -Database scale-out without Application changes Database of databases Modern SQL in databases Eventual consistency by Werner Vogels Amazon Aurora ascendant: How we designed a cloud-native relational database - All Things Distributed Options for scaling from 1 to 100,000 tenants Amazon Aurora: design considerations for high throughput cloud-native relational databases | the morning paper NOSQL - Key Points Criteria for Choosing Data store Building Real Time Analytics APIs at Scale Streaming Database Changes with Debezium Why you should pick strong consistency, whenever possible Change Data Capture, Outbox and Event Sourcing Debezium Engine - setup without Apache Kafka Debezium without kafka connect Using Streamsets for CDC From Oracle to Other destinations Transactions in Google Spanner Things I Wished More Developers Knew About Databases Interactive Book about SQL SQL Interview Questions Hadoop or Laptop The lightweight, distributed relational database built on SQLite Optimizing SQL Queries, Regardless of Platform How to do Data Modelling the right way Primer on Database Replication Connection pool sizing for databases Some SQL tricks from Application DBA Best Practices while writing SQL Using checksums to verify syncing 100M database records How to populate a table with 1 million records using single query How databases optimize Sub-queries Approaches to database migration Tigetbeetle - Fast financial accounting database Opinionated thoughts on SQL Databases Tools Collection DBMS Tools OctoSQL - Query, Join CSV with Postgresql/mysql from Command line TSBS - tool to benchmark bulk load performance and query execution performance.</description></item><item><title>About</title><link>https://sachinsu.github.io/projects/</link><pubDate>Fri, 07 Feb 2020 14:29:27 +0530</pubDate><guid>https://sachinsu.github.io/projects/</guid><description>Below are some of my project(s),
Tracfee, One stop for Tutors to manage students, track fees. Developed as SPA in VueJS + Quasar using API in Golang, Oracle Database and hosted on Netlify.
RSS APP RSS Reader app, to be used in lieu of Google Reader. Developed in Python with MongoDB as database.</description></item><item><title>About</title><link>https://sachinsu.github.io/about/</link><pubDate>Fri, 07 Feb 2020 14:28:27 +0530</pubDate><guid>https://sachinsu.github.io/about/</guid><description>I am a software developer, currently working at @worldlineglobal. This is my personal site where i share helpful content (gathered or authored) on Technology (and other topics).
I appreciate any ideas/suggestions you have on how I can improve this site.</description></item><item><title>Programming Languages - .NET</title><link>https://sachinsu.github.io/links/dotnet/</link><pubDate>Fri, 07 Feb 2020 14:14:27 +0530</pubDate><guid>https://sachinsu.github.io/links/dotnet/</guid><description>Microsoft .NET Platform where i have spent most time till now.
General Links What is .NET? by Scott Hanselman Async in Depth Using Async/Await in WCF or ASMX with AsyncEx Comparing Async/Await with GoRoutines .NET Presentations - Events in a Box Building Microservices in .NET Materialized View Pattern for Cross Service Queries Oracle DB and .NET - Optimizing Real-World Performance with Static Connection Pools Clean Code concepts and tools adapted for .</description></item><item><title>Programming Languages - Go</title><link>https://sachinsu.github.io/links/go/</link><pubDate>Fri, 07 Feb 2020 14:13:27 +0530</pubDate><guid>https://sachinsu.github.io/links/go/</guid><description>Go Language My current Favorite Language
Articles, E-books About Go - Compiler, packaging etc. When (and when not to) to use Generics in Go Ver. 1.8 High performance GO Workshop Learnings from Production usage of Go Thoughts on Go performance optimization Effective Go Handling 1M websockets connections in Go Notes on Go language Standard Go Project Layout 10 things you (probably) don&amp;amp;amp;rsquo;t know about Go Useful patterns in Go Interesting ways of using Go channels How i writer web services in Go Embed static file(s) in Go Executable and expose over HTTP Using go:embed in Go 1.</description></item><item><title>Programming - Testing</title><link>https://sachinsu.github.io/links/testing/</link><pubDate>Fri, 07 Feb 2020 14:05:07 +0530</pubDate><guid>https://sachinsu.github.io/links/testing/</guid><description>Testing Links Testing in 2021 How different software companies do testing HTTP(S) benchmark tools, testing/debugging, &amp;amp;amp; restAPI (RESTful) Toxiproxy - A TCP proxy to simulate network and system conditions for chaos and resiliency testing Papercut SMTP - Test Email delivery during development Malabi -Trace based testing in JavaScript AB Testing 101 API Test Client Bruno Load Testing K6 - Load testing tool Vegeta - HTTP load testing tool and library. Bombardier - Fast cross-platform HTTP benchmarking tool written in Go Plow - A high-performance HTTP benchmarking tool with real-time web UI Hey - HTTP load generator, ApacheBench (ab) replacement Collection of HTTP(S) benchmark tools, testing/debugging, &amp;amp;amp; restAPI (RESTful) Light weight cross-platform test automation</description></item><item><title>Programming Languages</title><link>https://sachinsu.github.io/links/planguages/</link><pubDate>Fri, 07 Feb 2020 13:38:46 +0530</pubDate><guid>https://sachinsu.github.io/links/planguages/</guid><description>Programming Languages Links Hello world in every Programming Language General You are not Google Production Launch Checklist Things I Learnt The Hard Way in 30 Years of Software Development A collection of (mostly) technical things every software developer should know Startup idea Checklist System Design Primer Developer Roadmaps Why our team cancelled our move to microservices How Does HTTPS Work? RSA Encryption Explained How do you cut a monolith in half?</description></item><item><title>Programming</title><link>https://sachinsu.github.io/links/programming/</link><pubDate>Fri, 07 Feb 2020 12:33:07 +0530</pubDate><guid>https://sachinsu.github.io/links/programming/</guid><description>System Design, Architecture Links covering concepts and approaches around Distributed Systems, DevOps, Observability etc.
Architectural Case studies Temenos Serverless banking at Scale @ AWS using CQRS leveraging RDS and DynamoDB Temenos @ AWS Architecture Diagrams Architecture for Generations Ubers Domain-Oriented Microservice Architecture Books on Architecture,Design Software Architecture Patterns by Mark Richards A comprehensive list of books on Software Architecture. Introduction to architecting systems for scale. Strategies/Approaches Rob Pikes 5 Rules of Programming Modules, monoliths, and microservices The macro problem with Microservices Break Monolith into Microservices Steps to migrate from Monolith to Microservices Distributed architecture concepts I learned while building a large payments system Video: Developing Asynchronous Microservices • Chris Richardson Collection of Software development Videos Slides Managing Data Consistency in Microservices Architecture Reliable Microservices Data Exchange With the Outbox Pattern Scaling to 100k Users Monolith - Modular Approach You dont need Microservices Event Modelling - Approach Ready for changes with Hexagonal Architecture How to fix Overloaded Web server How gov.</description></item><item><title>Useful Links</title><link>https://sachinsu.github.io/links/home/</link><pubDate>Fri, 07 Feb 2020 11:38:27 +0530</pubDate><guid>https://sachinsu.github.io/links/home/</guid><description>Below is list of curated links for various technical topics, Awesome - de-facto repository covering wide range of technical topics. Awesome list of self hosted software List of Open source Alternatives to SASS Online Learning Perspectives Distributed Systems Design, Architecture Testing UI/UX Languages Go .NET/C# Python Databases MySQL Oracle PostgreSQL NoSQL Cloud Tech AI/Machine Learning Machine Learning General Purpose tools Must follow Community Sites Hacker news Lobsters A list of SaaS, PaaS and IaaS offerings that have free tiers of interest to devops and infradev Miscellaneous OSS alternatives to Popular tools/Systems Open Source alternative tools Attention is all Manager need - Techniques and processes Gokey - Derived random passwords based on Master password Useful tools for Windows by Scott Hanselman Library of Free music Ergonomic Home office setup Consider upgrading a few PC/laptop Components like SSD How to use Google like a pro Pick Parts.</description></item><item><title>Using .NET standard Assembly in .NET core and .NET Framework</title><link>https://sachinsu.github.io/posts/dotnetstandard/</link><pubDate>Fri, 07 Feb 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/dotnetstandard/</guid><description>Background One of the key project(s) at my current organization is developed on .NET 4.6.1. It is developed as Modular Monolith. As part of it&amp;rsquo;s functionality, it supports different channels like Mobiles, Terminals and Web. For the Web channel, there was need to develop a Web application with,
High availability Lightweight, High throughput (Need to support few thousand(s) active users) Accordingly, we have been exploring developing this Web Application in .</description></item><item><title/><link>https://sachinsu.github.io/posts/dddnotes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sachinsu.github.io/posts/dddnotes/</guid><description>Even Eric Evans explicitly states that DDD isn&amp;rsquo;t suitable for problems when there&amp;rsquo;s substantial technical complexity, but little business domain complexity. Using DDD is most beneficial when the complexity of the domain makes it challenging for the domain experts to communicate their needs to the software developers. By investing your time and effort into modeling the domain and coming up with a set of terminology that&amp;rsquo;s understood for each subdomain, the process of understanding and solving the problem becomes much simpler and smoother</description></item></channel></rss>