<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MicroServices on Learnings in IT</title>
    <link>https://sachinsu.github.io/tags/microservices/</link>
    <description>Recent content in MicroServices on Learnings in IT</description>
    <image>
      <title>Learnings in IT</title>
      <url>https://sachinsu.github.io/images/papermod-cover.png</url>
      <link>https://sachinsu.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.151.0</generator>
    <language>en</language>
    <copyright>Â©</copyright>
    <lastBuildDate>Mon, 15 Sep 2025 01:00:00 +0530</lastBuildDate>
    <atom:link href="https://sachinsu.github.io/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Architecture, Modular Monolith and Vertical Slice Architecture </title>
      <link>https://sachinsu.github.io/posts/comparearchitecturestyles/</link>
      <pubDate>Mon, 15 Sep 2025 01:00:00 +0530</pubDate>
      <guid>https://sachinsu.github.io/posts/comparearchitecturestyles/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Good software architecture is crucial for a business to reach its goals. It provides a structured way to build software that is easy to maintain, reliable, and performs well.&lt;/p&gt;
&lt;h3 id=&#34;key-drivers-of-software-architecture&#34;&gt;Key drivers of software architecture&lt;/h3&gt;
&lt;p&gt;Several factors influence a software&amp;rsquo;s architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business requirements: What the software needs to do.&lt;/li&gt;
&lt;li&gt;Quality attributes: How well the software performs, such as its speed, scalability, and availability.&lt;/li&gt;
&lt;li&gt;Agility: How quickly the development team can adapt to changes.&lt;/li&gt;
&lt;li&gt;Constraints: The limitations of the deployment environment, such as the hardware or operating system.&lt;/li&gt;
&lt;li&gt;Principles: Established practices, like automated testing and deployment, that guide the development process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;different-ways-to-structure-software&#34;&gt;Different Ways to Structure Software&lt;/h3&gt;
&lt;p&gt;There are two main ways to build software applications:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Temporal.io to build Long running Workflows</title>
      <link>https://sachinsu.github.io/posts/temporalworkflow/</link>
      <pubDate>Mon, 07 Dec 2020 08:25:04 +0530</pubDate>
      <guid>https://sachinsu.github.io/posts/temporalworkflow/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;In a typical business Application, there are often requirements for,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Batch processing - Often long running Tasks like data import/export, End of day processing etc. These tasks are often scheduled to be executed at pre-defined interval or on occurance of an Event.&lt;/li&gt;
&lt;li&gt;Asychronous processing - Tasks, often part of business process / workflow, that can be performed asychronously or offloaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such requirements are often fulfilled with custom approaches like batch processing frameworks, ETL Tools or using Queues or specific database features.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
