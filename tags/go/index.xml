<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Learnings in IT</title><link>https://sachinsu.github.io/tags/go/</link><description>Recent content in Go on Learnings in IT</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 30 Dec 2021 01:00:00 +0530</lastBuildDate><atom:link href="https://sachinsu.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Can SQLite be considered for Server Applications?</title><link>https://sachinsu.github.io/posts/is_sqlite_production_ready/</link><pubDate>Thu, 30 Dec 2021 01:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/is_sqlite_production_ready/</guid><description>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;While embarking on building any new server application, one of the key requirement is whether it needs durable, persistent storage of data (and in most cases, it does). This is followed by evaluating suitable data store. Likely evaluation criteria is Application&amp;rsquo;s Requirement (Tolerance for eventual consistency, High Availability etc.), Team&amp;rsquo;s familiarity, Costs, Tech. support availability and so on.
In case of choices in relational databases, typical go to options are MySQL, PostgreSQL or even proprietary databases like Oracle , SQL Server. Seldom one considers &lt;a href=https://SQLite.org
 
 target=_blank rel="noopener noreferrer"
&gt;SQLite&lt;/a&gt; for this purpose.&lt;/p&gt;</description></item><item><title>ELT approach for Data Pipelines</title><link>https://sachinsu.github.io/posts/elt/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0530</pubDate><guid>https://sachinsu.github.io/posts/elt/</guid><description>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;While gathering data for Analytics, one often has to source data from multiple sources. Traditionally, the approach has been to do ETL (Extract-Transform-load) where,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Extract&lt;/strong&gt; - typically involves retrieving data from source. This could also be via streaming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt; - Apply transformation to the extracted data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Load&lt;/strong&gt; - Loading the data in Operation Data store (ODS) or data warehouse
Refer &lt;a href=https://www.sas.com/en_us/insights/data-management/what-is-etl.html#close
 
 target=_blank rel="noopener noreferrer"
&gt;here&lt;/a&gt; for more details on ETL. ETL has been made easy by tools like &lt;a href=https://www.talend.com/products/talend-open-studio/
 
 target=_blank rel="noopener noreferrer"
&gt;Talend&lt;/a&gt;, &lt;a href=https://docs.microsoft.com/en-us/sql/integration-services/sql-server-integration-services
 
 target=_blank rel="noopener noreferrer"
&gt;SSIS&lt;/a&gt; and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there has been shift from above approach due to,&lt;/p&gt;</description></item><item><title>Using Temporal.io to build Long running Workflows</title><link>https://sachinsu.github.io/posts/temporalworkflow/</link><pubDate>Mon, 07 Dec 2020 08:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/temporalworkflow/</guid><description>&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;In a typical business Application, there are often requirements for,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Batch processing - Often long running Tasks like data import/export, End of day processing etc. These tasks are often scheduled to be executed at pre-defined interval or on occurance of an Event.&lt;/li&gt;
&lt;li&gt;Asychronous processing - Tasks, often part of business process / workflow, that can be performed asychronously or offloaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such requirements are often fulfilled with custom approaches like batch processing frameworks, ETL Tools or using Queues or specific database features.&lt;/p&gt;</description></item><item><title>Getting Started with OpenTelemetry</title><link>https://sachinsu.github.io/posts/opentelemetry/</link><pubDate>Sat, 07 Nov 2020 08:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/opentelemetry/</guid><description>&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;How many times have we landed up in a meeting staring at random slowness or such production issues in a distributed Application ? only to experience helplessness with limited (or often times no) visibility available about the runtime behavior of the Application. It often ends up in manually correlating whatever diagnostic data available from Application and combining it with trace/logs that are available from O/S, databases etc. and trying to figure out &amp;ldquo;Root cause&amp;rdquo; of the issue.&lt;/p&gt;</description></item><item><title>Ninja - Using lightweight build system for Go projects</title><link>https://sachinsu.github.io/posts/ninjabuildsystem/</link><pubDate>Tue, 27 Oct 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/ninjabuildsystem/</guid><description>&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;I primarily work on Windows for development purposes. Whenever its about writing code in Golang, invariably one comes across usage of Make. A quick check on popular Go projects on Github will show Makefile being used to automate tasks like linting, build, testing and deployment.&lt;/p&gt;
&lt;p&gt;Being on Windows, i have been looking for alternative build tool that is easy to setup (i.e. doesn&amp;rsquo;t require mingw and such environments) and use compared to Make (which is primarily targetted at Unix and Unix like Operating Systems).&lt;/p&gt;</description></item><item><title>Tool to mass DM followers on Twitter in Go</title><link>https://sachinsu.github.io/posts/massdmgolang/</link><pubDate>Sat, 25 Jul 2020 10:25:04 +0530</pubDate><guid>https://sachinsu.github.io/posts/massdmgolang/</guid><description>&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;I recently came across bounty by &lt;a href=https://twitter.com/balajis/status/1271945241881268224?s&amp;#61;20
 
 target=_blank rel="noopener noreferrer"
&gt;Balaji Srinivasan&lt;/a&gt; to send Direct Message to all twitter followers. &lt;em&gt;Currently, i do not intend to participate in bounty and this is mere exercise.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is an attempt to write CLI tool in &lt;a href=https://golang.org
 
 target=_blank rel="noopener noreferrer"
&gt;Golang&lt;/a&gt; in response to it.&lt;/p&gt;
&lt;p&gt;For detailed requirements, refer &lt;a href=https://github.com/balajis/twitter-export
 
 target=_blank rel="noopener noreferrer"
&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="approach"&gt;Approach&lt;/h2&gt;
&lt;p&gt;In Brief,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLI should,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;accept arguments like Twitter API Key,Auth token, DM Message&lt;/li&gt;
&lt;li&gt;Download all followers (with profile details)&lt;/li&gt;
&lt;li&gt;Rank them by Criteria (e.g. Location)&lt;/li&gt;
&lt;li&gt;Send each follower a DM with provided message (upto daily DM Limit)&lt;/li&gt;
&lt;li&gt;be easy to use and maintain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notes,&lt;/p&gt;</description></item></channel></rss>